
int greetuser(char *src)
{
  __int128 dest; // [esp+10h] [ebp-48h] BYREF
  __int16 v3; // [esp+20h] [ebp-38h]
  char v4; // [esp+22h] [ebp-36h]

  switch ( language )
  {
    case 1:
      dest = xmmword_8048717;
      v3 = *((_WORD *)&xmmword_8048717 + 8);
      v4 = *((_BYTE *)&xmmword_8048717 + 18);
      break;
    case 2:
      strcpy((char *)&dest, "Goedemiddag! ");
      break;
    case 0:
      strcpy((char *)&dest, "Hello ");
      break;
  }
  strcat((char *)&dest, src);
  return puts((const char *)&dest);
}



int main(int argc, const char **argv, const char **envp)
{
  char v4[76]; // [esp+0h] [ebp-ACh] BYREF
  char dest[76]; // [esp+50h] [ebp-5Ch] BYREF
  char *v6; // [esp+9Ch] [ebp-10h]

  if ( argc != 3 )
    return 1;

  memset(dest, 0, sizeof(dest));        // dest est remplie de zero
  strncpy(dest, argv[1], 0x28);         // on copie les 40 premier charactere de argv[1] dans dest
  strncpy(&dest[40], argv[2], 0x20);    // on concatene les 32 premier charactere de argv[2] dans dest

  v6 = getenv("LANG");                  // on stock le contenue de la variable d'env LANG dans v6
  if ( v6 )
  {
    if ( !memcmp(v6, "fi", 2) )        // on compare les 2 premier char de v6 avec "fi", si elle cela est identique on assigne a langage la valeur de 1
    {
      language = 1;
    }
    else if ( !memcmp(v6, "nl", 2) )   // Pareil mais on compare avec "nl" et si oui on met langage a 2 
    {
      language = 2;
    }
    else                                // enfin on initialise a 0 langage, mais elle est deja de base a zero cette partie a ete ajouter pour la comprehension
    {
      language = 0;
    }
  }
  memcpy(v4, dest, sizeof(v4));         // on copie  dest dans v4
  return greetuser((&v4[0]));
}
